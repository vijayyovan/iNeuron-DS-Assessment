def print_transformed_dict(input_dict):
    """
    Recursively transforms a nested dictionary to print key hierarchies and final values easily.

    Args:
        input_dict (dict): The nested dictionary to transform.
    """

    def transform_dict(d, key_path=[]):
        """
        Recursively builds the transformed representation.

        Args:
            d (dict): The current sub-dictionary being processed.
            key_path (list): The list of keys traversed to reach the current sub-dictionary.
        """

        output = {}
        for key, value in d.items():
            key_path.append(key)

            if isinstance(value, dict): 
                transform_dict(value, key_path)  # Recurse deeper in the dictionary
            else:
                output[key_path[-1]] = [value]  # Store the final value
                # Cascade keys back up for path building
                for i in range(len(key_path) - 1):
                    output[key_path[i]] = key_path[i + 1:]

            key_path.pop()  # Remove the last added key after processing

        return output

    transformed_dict = transform_dict(input_dict)
    print(transformed_dict)


# Example Usage (same as before)
