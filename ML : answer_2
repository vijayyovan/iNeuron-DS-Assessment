import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.pipeline import make_pipeline
from sklearn.metrics import mean_squared_error

# Load the dataset
df = pd.read_excel('/mnt/data/Bengaluru_House_Data.xls')

# Basic preprocessing steps:
# For simplicity, let's drop rows with missing values and focus only on numerical columns for this regression task.
# A more thorough preprocessing would handle categorical variables and missing data appropriately.
df = df.select_dtypes(include=[int, float]).dropna()

# Define features X and target y
X = df.drop('price', axis=1)  # assuming 'price' is the target column
y = df['price']

# Split the dataset into the training set and test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create an SVM regressor pipeline with a scaler
svm_regressor = make_pipeline(StandardScaler(), SVR())

# Train the SVM regressor on the training data
svm_regressor.fit(X_train, y_train)

# Predict the labels for the test set
y_pred = svm_regressor.predict(X_test)

# Evaluate the SVM regressor
mse = mean_squared_error(y_test, y_pred)
mse
